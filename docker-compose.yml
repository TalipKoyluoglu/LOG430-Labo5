services:
  nginx:
    image: nginx:1.23.3-alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./config/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      - app
    restart: always

  app:
    build: .
    command: sh /app/entrypoint.sh
    # Le port 8000 n'est plus exposé à l'extérieur, seul NGINX y a accès.
    # ports:
    #   - "8000:8000"
    environment:
      PYTHONPATH: /app
      DJANGO_SETTINGS_MODULE: config.settings
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - .:/app

  db:
    image: postgres:15
    environment:
      POSTGRES_DB: lab4db
      POSTGRES_USER: labuser
      POSTGRES_PASSWORD: labpass
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "labuser", "-d", "lab4db"]
      interval: 5s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:v2.45.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    depends_on:
      - app

  grafana:
    image: grafana/grafana:9.5.3
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
    restart: unless-stopped
    depends_on:
      - prometheus

  redis:
    image: redis:7.2-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped

  produits-db:
    image: postgres:15
    environment:
      POSTGRES_DB: produits_db
      POSTGRES_USER: produits_user
      POSTGRES_PASSWORD: produits_pass
    ports:
      - "5434:5432"
    volumes:
      - produits_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "produits_user", "-d", "produits_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  catalogue-service:
    build: ./service-catalogue
    ports:
      - "8001:8000"
    environment:
      POSTGRES_DB: produits_db
      POSTGRES_USER: produits_user
      POSTGRES_PASSWORD: produits_pass
      POSTGRES_HOST: produits-db
      POSTGRES_PORT: 5432
    depends_on:
      produits-db:
        condition: service_healthy
    volumes:
      - ./service-catalogue:/app
    command: >
      sh -c "python manage.py migrate &&
             python load_data.py &&
             python manage.py runserver 0.0.0.0:8000"

  inventaire-db:
    image: postgres:15
    environment:
      POSTGRES_DB: inventaire_db
      POSTGRES_USER: inventaire_user
      POSTGRES_PASSWORD: inventaire_pass
    ports:
      - "5435:5432"
    volumes:
      - inventaire_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "inventaire_user", "-d", "inventaire_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  inventaire-service:
    build: ./service-inventaire
    ports:
      - "8002:8000"
    environment:
      POSTGRES_DB: inventaire_db
      POSTGRES_USER: inventaire_user
      POSTGRES_PASSWORD: inventaire_pass
      POSTGRES_HOST: inventaire-db
      POSTGRES_PORT: 5432
    depends_on:
      inventaire-db:
        condition: service_healthy
    volumes:
      - ./service-inventaire:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py loaddata initial_data.json &&
             python manage.py runserver 0.0.0.0:8000"

  commandes-db:
    image: postgres:15
    environment:
      POSTGRES_DB: commandes_db
      POSTGRES_USER: commandes_user
      POSTGRES_PASSWORD: commandes_pass
    ports:
      - "5436:5432"
    volumes:
      - commandes_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "commandes_user", "-d", "commandes_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  commandes-service:
    build: ./service-commandes
    ports:
      - "8003:8000"
    environment:
      POSTGRES_DB: commandes_db
      POSTGRES_USER: commandes_user
      POSTGRES_PASSWORD: commandes_pass
      POSTGRES_HOST: commandes-db
      POSTGRES_PORT: 5432
      PRODUCT_SERVICE_URL: http://catalogue-service:8000
      STOCK_SERVICE_URL: http://inventaire-service:8000
    depends_on:
      commandes-db:
        condition: service_healthy
      catalogue-service:
        condition: service_started
      inventaire-service:
        condition: service_started
    volumes:
      - ./service-commandes:/app
    command: >
      sh -c "python manage.py migrate &&
             python load_data.py &&
             python manage.py runserver 0.0.0.0:8000"

  supply-chain-db:
    image: postgres:15
    environment:
      POSTGRES_DB: supply_chain_db
      POSTGRES_USER: supply_chain_user
      POSTGRES_PASSWORD: supply_chain_pass
    ports:
      - "5437:5432"
    volumes:
      - supply_chain_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "supply_chain_user", "-d", "supply_chain_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  supply-chain-service:
    build: ./service-supply-chain
    ports:
      - "8004:8000"
    environment:
      POSTGRES_DB: supply_chain_db
      POSTGRES_USER: supply_chain_user
      POSTGRES_PASSWORD: supply_chain_pass
      POSTGRES_HOST: supply-chain-db
      POSTGRES_PORT: 5432
      STOCK_SERVICE_URL: http://inventaire-service:8000
    depends_on:
      supply-chain-db:
        condition: service_healthy
      inventaire-service:
        condition: service_started
    volumes:
      - ./service-supply-chain:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  ecommerce-db:
    image: postgres:15
    environment:
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
    ports:
      - "5438:5432"
    volumes:
      - ecommerce_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "ecommerce_user", "-d", "ecommerce_db"]
      interval: 5s
      timeout: 5s
      retries: 5

  ecommerce-service:
    build: ./service-ecommerce
    ports:
      - "8005:8005"
    environment:
      DJANGO_SETTINGS_MODULE: config.settings
      POSTGRES_DB: ecommerce_db
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_pass
      POSTGRES_HOST: ecommerce-db
      POSTGRES_PORT: 5432
      CATALOGUE_SERVICE_URL: http://catalogue-service:8000
      INVENTAIRE_SERVICE_URL: http://inventaire-service:8000
      COMMANDES_SERVICE_URL: http://commandes-service:8000
    depends_on:
      ecommerce-db:
        condition: service_healthy
      catalogue-service:
        condition: service_started
      inventaire-service:
        condition: service_started
      commandes-service:
        condition: service_started
    volumes:
      - ./service-ecommerce:/app
    command: >
      sh -c "python manage.py migrate &&
             python manage.py loaddata initial_data.json &&
             python manage.py runserver 0.0.0.0:8005"

volumes:
  pgdata:
  prometheus_data:
  grafana_data:
  redis_data:
  produits_data:
  commandes_data:
  supply_chain_data:
  inventaire_data:
  ecommerce_data:
